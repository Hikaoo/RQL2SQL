/* Generated By:JavaCC: Do not edit this line. RelationalQueryLanguage.java */
package br.edu.ifsp.parser;

/*
 * Import session
 */
import br.edu.ifsp.symbolTable.*;
import br.edu.ifsp.syntacticTree.*;
import br.edu.ifsp.syntacticTree.interfaces.*;

public class RelationalQueryLanguage implements RelationalQueryLanguageConstants {

        /**
	 * Method used to link a founded token with his name.
	 * 
	 * @see the book DELAMARO, M. E. Como Construir um Compilador: Utilizando
	 *      Ferramentas Java. São Paulo: Novatec. 2004
	 * @param x
	 * @return
	 */
        public static String im(int x) {

                int k;
                String s;

                s = tokenImage[x];
                k = s.lastIndexOf("\u005c"");

                try {

                        s.substring(1, k);
                } catch (Exception exception) {
                }

                return s;
        }

/* **************************************************************************************************************
/*                                                Syntax Definition 											*
/* **************************************************************************************************************/
  final public ListNode program() throws ParseException {
   RelationalOperationsNode r = null;
   ListNode l = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PARENTHESIS:
      case PROJECT_TOKEN:
      case SELECT_TOKEN:
      case RENAME_TOKEN:
      case TRANSITIVE_CLOSE_LEFT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      r = relationalOperations();
      jj_consume_token(SEMICOLON);
              if ( l == null ) l = new ListNode( r );
              else l.add( r );
    }
    jj_consume_token(0);
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public RelationalOperationsNode relationalOperations() throws ParseException {
   RelationalOperationsNodeChildren opnd = null;
    opnd = query();
     {if (true) return new RelationalOperationsNode( (QueryNode) opnd );}
    throw new Error("Missing return statement in function");
  }

  final public QueryNode query() throws ParseException {
   QueryNodeChildren qnc = null;
    qnc = readOnlyOperations();
          {if (true) return new QueryNode( qnc );}
    throw new Error("Missing return statement in function");
  }

  final public ReadOnlyOperationsNode readOnlyOperations() throws ParseException {
        ReadOnlyOperationsNodeChildren roonc = null;
    if (jj_2_1(2)) {
      roonc = binaryOperations();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROJECT_TOKEN:
      case SELECT_TOKEN:
      case RENAME_TOKEN:
      case TRANSITIVE_CLOSE_LEFT:
      case IDENTIFIER:
        roonc = unitaryOperations();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return new ReadOnlyOperationsNode(roonc);}
    throw new Error("Missing return statement in function");
  }

  final public BinaryOperationsNode binaryOperations() throws ParseException {
        BinaryOperationsNodeChildren bonc = null;
        BinarySetNode bst = null;
        ReadOnlyOperationsNode roon1 = null;
        ReadOnlyOperationsNode roon2 = null;
        RelationNode rn1 = null;
        RelationNode rn2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      roon1 = readOnlyOperations();
      jj_consume_token(RIGHT_PARENTHESIS);
      break;
    case IDENTIFIER:
      rn1 = relation();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      bonc = union();
      break;
    case AND:
      bonc = intersection();
      break;
    case MINUS_SIGN:
      bonc = difference();
      break;
    case LEFT_BRACKET:
    case NATURAL_JOIN_TOKEN:
      bonc = join();
      break;
    case CROSS_TOKEN:
      bonc = crossjoin();
      break;
    case SOLIDUS:
      bonc = division();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      roon2 = readOnlyOperations();
      jj_consume_token(RIGHT_PARENTHESIS);
      break;
    case IDENTIFIER:
      rn2 = relation();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        bst = new BinarySetNode();
        if(roon1 != null) bst.addFirstRelation(roon1); else bst.addFirstRelation(rn1);
        if(roon2 != null) bst.addSecondRelation(roon2); else bst.addSecondRelation(rn2);
        {if (true) return new BinaryOperationsNode(bonc, bst);}
    throw new Error("Missing return statement in function");
  }

  final public UnionNode union() throws ParseException {
        Token t = null;
    t = jj_consume_token(OR);
          {if (true) return new UnionNode(t);}
    throw new Error("Missing return statement in function");
  }

  final public IntersectionNode intersection() throws ParseException {
        Token t = null;
    t = jj_consume_token(AND);
          {if (true) return new IntersectionNode(t);}
    throw new Error("Missing return statement in function");
  }

  final public DifferenceNode difference() throws ParseException {
        Token t = null;
    t = jj_consume_token(MINUS_SIGN);
          {if (true) return new DifferenceNode(t);}
    throw new Error("Missing return statement in function");
  }

  final public CrossJoinNode crossjoin() throws ParseException {
        Token t = null;
    t = jj_consume_token(CROSS_TOKEN);
          {if (true) return new CrossJoinNode(t);}
    throw new Error("Missing return statement in function");
  }

  final public JoinNode join() throws ParseException {
        LogicalSentenceNode lsn = null;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL_JOIN_TOKEN:
      t = jj_consume_token(NATURAL_JOIN_TOKEN);
      break;
    case LEFT_BRACKET:
      t = jj_consume_token(LEFT_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PARENTHESIS:
      case NOT:
      case INTEGER:
      case DECIMAL:
      case HEX:
      case OCT:
      case BIN:
      case STRING:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
        lsn = logicalSentence();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_BRACKET);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(lsn == null) {if (true) return new JoinNode(t);} else {if (true) return new JoinNode(t, lsn);}
    throw new Error("Missing return statement in function");
  }

  final public DivisionNode division() throws ParseException {
        Token t = null;
    t = jj_consume_token(SOLIDUS);
          {if (true) return new DivisionNode(t);}
    throw new Error("Missing return statement in function");
  }

  final public UnitaryOperationsNode unitaryOperations() throws ParseException {
        UnitaryOperationsNodeChildren uonc = null;
        ReadOnlyOperationsNode roon = null;
        RelationNode rn = null;
        UnitaryOperationsNode uon = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSITIVE_CLOSE_LEFT:
      uon = transitiveClose();
                                  {if (true) return uon;}
      break;
    case IDENTIFIER:
      rn = relation();
                            {if (true) return new UnitaryOperationsNode( rn );}
      break;
    case PROJECT_TOKEN:
    case SELECT_TOKEN:
    case RENAME_TOKEN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROJECT_TOKEN:
        uonc = project();
        break;
      case SELECT_TOKEN:
        uonc = select();
        break;
      case RENAME_TOKEN:
        uonc = rename();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LEFT_PARENTHESIS);
      roon = readOnlyOperations();
      jj_consume_token(RIGHT_PARENTHESIS);
                                                                                  {if (true) return new UnitaryOperationsNode(uonc, roon);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UnitaryOperationsNode transitiveClose() throws ParseException {
        UnitaryOperationsNodeChildren uonc = null;
        ReadOnlyOperationsNode roon = null;
        RelationNode rn = null;
        Token t = null;
    t = jj_consume_token(TRANSITIVE_CLOSE_LEFT);
    if (jj_2_2(2)) {
      rn = relation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PARENTHESIS:
      case PROJECT_TOKEN:
      case SELECT_TOKEN:
      case RENAME_TOKEN:
      case TRANSITIVE_CLOSE_LEFT:
      case IDENTIFIER:
        roon = readOnlyOperations();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TRANSITIVE_CLOSE_RIGHT);
          uonc = new TransitiveCloseNode(t); if(rn==null) {if (true) return new UnitaryOperationsNode(uonc, roon);} else {if (true) return new UnitaryOperationsNode(uonc, rn);}
    throw new Error("Missing return statement in function");
  }

  final public ProjectNode project() throws ParseException {
        ListNode ln = null;
        Token token = null;
    jj_consume_token(PROJECT_TOKEN);
    token = jj_consume_token(IDENTIFIER);
          ln = new ListNode( new AttributeNode( token ) );
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      token = jj_consume_token(IDENTIFIER);
           ln.add( new AttributeNode( token ) );
    }
          {if (true) return new ProjectNode(ln);}
    throw new Error("Missing return statement in function");
  }

  final public SelectNode select() throws ParseException {
        LogicalSentenceNode lsn = null;
    jj_consume_token(SELECT_TOKEN);
    lsn = logicalSentence();
     {if (true) return new SelectNode(lsn);}
    throw new Error("Missing return statement in function");
  }

  final public RenameNode rename() throws ParseException {
        ListNode ln = null;
        Token t1 = null, t2 = null;
    jj_consume_token(RENAME_TOKEN);
    t1 = jj_consume_token(IDENTIFIER);
    t2 = jj_consume_token(IDENTIFIER);
     if(ln==null) ln = new ListNode( new RenameSetNode(t1, t2) );
        else ln.add( new RenameSetNode(t1, t2) );
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      t1 = jj_consume_token(IDENTIFIER);
      t2 = jj_consume_token(IDENTIFIER);
          if(ln==null) ln = new ListNode( new RenameSetNode(t1, t2) );
        else ln.add( new RenameSetNode(t1, t2) );
    }
     {if (true) return new RenameNode(ln);}
    throw new Error("Missing return statement in function");
  }

  final public RelationNode relation() throws ParseException {
        Token t = null;
    t = jj_consume_token(IDENTIFIER);
     {if (true) return new RelationNode(t);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalSentenceNode logicalSentence() throws ParseException {
        ConditionalSentenceNode csn1 = null;
        ConditionalSentenceNode csn2 = null;
        LogicalOperatorNode lon = null;
        LogicalOperatorNode temp = null;
        Token t = null;
    csn1 = conditionalSentence();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case XOR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      t = logicalOperator();
      csn2 = conditionalSentence();
                if(lon == null) { lon = new LogicalOperatorNode(t, csn1, csn2);
                temp = lon;
                }else{
                        temp.add(t, csn2);
                        temp = temp.getNextLogicalOperatorNode();
                }
    }
                if(lon==null) {if (true) return new LogicalSentenceNode(csn1);}
                else {if (true) return new LogicalSentenceNode(lon);}
    throw new Error("Missing return statement in function");
  }

//TERNARY OPERATOR (IF) NOT IMPLEMENTED YET
  final public ConditionalSentenceNode conditionalSentence() throws ParseException {
        ComparisonSentenceNode csn = null;
        ComparisonSentenceNode csn1 = null;
        ComparisonSentenceNode csn2 = null;
        ListNode ln = null;
        Token t = null;
    csn = comparisonSentence();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(IF);
      csn1 = comparisonSentence();
      jj_consume_token(COLON);
      csn2 = comparisonSentence();
                if(ln == null) ln = new ListNode(new IfNode(t, csn1, csn2)); else ln.add(new IfNode(t, csn1, csn2));
    }
          if(ln==null) {if (true) return new ConditionalSentenceNode(csn);} else {if (true) return new ConditionalSentenceNode(csn, ln);}
    throw new Error("Missing return statement in function");
  }

  final public ComparisonSentenceNode comparisonSentence() throws ParseException {
        InstanceofSentenceNode isn1 = null;
        InstanceofSentenceNode isn2 = null;
        ComparisonOperatorNode con = null;
        ComparisonOperatorNode temp = null;
        Token t = null;
    isn1 = instanceofSentence();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
      case EQUALS:
      case NOT_EQUALS:
      case GREATER_THAN:
      case GREATER_THAN_OR_EQUALS:
      case LESS_THAN_OR_EQUALS:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      t = comparisonOperator();
      isn2 = instanceofSentence();
                if(con == null){
                        con = new ComparisonOperatorNode(t, isn1, isn2);
                        temp = con;
           }else{
                        temp.add(t, isn2);
                        temp = temp.getNextComparisonOperatorNode();
           }
    }
                if(con==null) {if (true) return new ComparisonSentenceNode(isn1);}
                else {if (true) return new ComparisonSentenceNode(con);}
    throw new Error("Missing return statement in function");
  }

//NOT IMPLEMENTED YET
  final public InstanceofSentenceNode instanceofSentence() throws ParseException {
        AdditionSentenceNode asn = null;
        Token type = null;
    asn = additionSentence();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      type = type();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
     if(type != null) {if (true) return new InstanceofSentenceNode(asn);}
   else {if (true) return new InstanceofSentenceNode(asn, type);}
    throw new Error("Missing return statement in function");
  }

  final public AdditionSentenceNode additionSentence() throws ParseException {
        MultiplicationSentenceNode msn1 = null;
        MultiplicationSentenceNode msn2 = null;
        AdditionOperatorNode aon = null;
        AdditionOperatorNode temp = null;
        Token t = null;
    msn1 = multiplicationSentence();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
      case MINUS_SIGN:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        t = jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        t = jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      msn2 = multiplicationSentence();
                if(aon == null){
                        aon = new AdditionOperatorNode(t, msn1, msn2);
                        temp = aon;
           }else{
                        temp.add(t, msn2);
                        temp = temp.getNextAdditionOperatorNode();
           }
    }
                if(aon==null) {if (true) return new AdditionSentenceNode(msn1);}
                else {if (true) return new AdditionSentenceNode(aon);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicationSentenceNode multiplicationSentence() throws ParseException {
        FactorNode fn1 = null;
        FactorNode fn2 = null;
        MultiplicationOperatorNode mon = null;
        MultiplicationOperatorNode temp = null;
        Token t = null;
    fn1 = factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PERCENT:
      case ASTERISK:
      case SOLIDUS:
      case POWER:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        t = jj_consume_token(ASTERISK);
        break;
      case POWER:
        t = jj_consume_token(POWER);
        break;
      case SOLIDUS:
        t = jj_consume_token(SOLIDUS);
        break;
      case PERCENT:
        t = jj_consume_token(PERCENT);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      fn2 = factor();
           if(mon == null){
                        mon = new MultiplicationOperatorNode(t, fn1, fn2);
                        temp = mon;
           }else{
                        temp.add(t, fn2);
                        temp = temp.getNextMultiplicationOperatorNode();
           }
    }
                if(mon==null) {if (true) return new MultiplicationSentenceNode(fn1);}
                else {if (true) return new MultiplicationSentenceNode(mon);}
    throw new Error("Missing return statement in function");
  }

  final public FactorNode factor() throws ParseException {
        Token not = null;
        Token t = null;
        ConditionalSentenceNode csn = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      not = jj_consume_token(NOT);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case DECIMAL:
    case HEX:
    case OCT:
    case BIN:
    case STRING:
    case TRUE:
    case FALSE:
      t = literal();
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      csn = conditionalSentence();
      jj_consume_token(RIGHT_PARENTHESIS);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     if(csn == null) {if (true) return new FactorNode(not, t);} else {if (true) return new FactorNode(not, csn);}
    throw new Error("Missing return statement in function");
  }

  final public Token logicalOperator() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case XOR:
      t = jj_consume_token(XOR);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token comparisonOperator() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS_THAN:
      t = jj_consume_token(LESS_THAN);
      break;
    case LESS_THAN_OR_EQUALS:
      t = jj_consume_token(LESS_THAN_OR_EQUALS);
      break;
    case GREATER_THAN:
      t = jj_consume_token(GREATER_THAN);
      break;
    case GREATER_THAN_OR_EQUALS:
      t = jj_consume_token(GREATER_THAN_OR_EQUALS);
      break;
    case EQUALS:
      t = jj_consume_token(EQUALS);
      break;
    case NOT_EQUALS:
      t = jj_consume_token(NOT_EQUALS);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token literal() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case DECIMAL:
      t = jj_consume_token(DECIMAL);
      break;
    case HEX:
      t = jj_consume_token(HEX);
      break;
    case OCT:
      t = jj_consume_token(OCT);
      break;
    case BIN:
      t = jj_consume_token(BIN);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token type() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARCHAR_TYPE:
      t = jj_consume_token(VARCHAR_TYPE);
      break;
    case CHAR_TYPE:
      t = jj_consume_token(CHAR_TYPE);
      break;
    case INTEGER_TYPE:
      t = jj_consume_token(INTEGER_TYPE);
      break;
    case DOUBLE_TYPE:
      t = jj_consume_token(DOUBLE_TYPE);
      break;
    case FLOAT_TYPE:
      t = jj_consume_token(FLOAT_TYPE);
      break;
    case BLOB_TYPE:
      t = jj_consume_token(BLOB_TYPE);
      break;
    case GEOMETRIC_TYPE:
      t = jj_consume_token(GEOMETRIC_TYPE);
      break;
    case RELATION_TYPE:
      t = jj_consume_token(RELATION_TYPE);
      break;
    case BOOLEAN_TYPE:
      t = jj_consume_token(BOOLEAN_TYPE);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_34() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(RENAME_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(SOLIDUS)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(SELECT_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(LEFT_PARENTHESIS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(PROJECT_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(CROSS_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(TRANSITIVE_CLOSE_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RelationalQueryLanguageTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x0,0x200,0x10014000,0x200,0x200,0x10000000,0x0,0x0,0x200,0x2000,0x2000,0x0,0x0,0x1f80000,0x0,0x5000,0x5000,0x10880,0x10880,0x0,0x200,0x0,0x1f80000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x238,0x238,0x0,0x30180,0x0,0xe0080000,0x100,0x38,0x238,0x238,0x0,0x0,0x70000,0x2,0x0,0x1,0x0,0x0,0x4,0x4,0x80000,0xe0000000,0x70000,0x0,0xe0000000,0x1ff00000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20,0x20,0x20,0x0,0x20,0x3f,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x1f,0x20,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RelationalQueryLanguage(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RelationalQueryLanguage(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RelationalQueryLanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RelationalQueryLanguage(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RelationalQueryLanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RelationalQueryLanguage(RelationalQueryLanguageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RelationalQueryLanguageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[83];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
